import pandas as pd
import streamlit as st
from sklearn.ensemble import IsolationForest

st.set_page_config(page_title="An√°lise ENEM", layout="centered")

@st.cache_data(ttl=3600*20)
def load_data():
    return pd.read_csv('data/enem.csv', encoding='latin-1', sep=';').dropna()

# Limpa os dados removendo outliers usando IsolationForest e tratando valores nulos
@st.cache_data(ttl=3600*20)
def clean_data(df):
    df_clean = df.copy()
    
    numeric_cols = ['NU_NOTA_CN', 'NU_NOTA_CH', 'NU_NOTA_LC', 'NU_NOTA_MT', 'NU_NOTA_REDACAO']
    df_clean = df_clean.dropna(subset=numeric_cols)
    df_clean = df_clean[(df_clean[numeric_cols] > 0).all(axis=1)]
    
    isolation_forest = IsolationForest(contamination=0.05, random_state=42)
    outliers = isolation_forest.fit_predict(df_clean[numeric_cols])
    df_clean = df_clean[outliers == 1]
    
    return df_clean

def question1(df):
    st.subheader("Renda Familiar vs Nota Geral das Provas Objetivas")
    
    # Calcular a nota geral (m√©dia das provas objetivas) para cada participante
    colunas_provas = ['NU_NOTA_CN', 'NU_NOTA_CH', 'NU_NOTA_LC', 'NU_NOTA_MT']
    df = df.copy()
    df['NOTA_GERAL'] = df[colunas_provas].mean(axis=1)
    
    # Calcular estat√≠sticas descritivas da nota geral por faixa de renda
    estatisticas_nota_geral = df.groupby('Q006')['NOTA_GERAL'].describe()
    
    # Criar abas para cada tipo de visualiza√ß√£o
    tab1, tab2, tab3, tab4 = st.tabs(["üìñ An√°lise Interpretativa", "üìä Gr√°ficos", "üìã Tabelas Descritivas", "üîó An√°lise de Correla√ß√£o"])
    
    with tab1:
        st.write("### üéì O que os dados nos revelam sobre renda e desempenho no ENEM?")
        
        # Calcular algumas estat√≠sticas para a an√°lise
        nota_mais_alta = estatisticas_nota_geral['mean'].max()
        renda_mais_alta = estatisticas_nota_geral['mean'].idxmax()
        nota_mais_baixa = estatisticas_nota_geral['mean'].min()
        renda_mais_baixa = estatisticas_nota_geral['mean'].idxmin()
        diferenca_notas = nota_mais_alta - nota_mais_baixa
        
        # An√°lise principal
        st.write("#### üîç **Principais Descobertas:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info(f"""
            **üèÜ Maior Desempenho:**
            - Faixa de renda: **{renda_mais_alta}**
            - Nota m√©dia: **{nota_mais_alta:.1f} pontos**
            """)
        
        with col2:
            st.warning(f"""
            **üìâ Menor Desempenho:**
            - Faixa de renda: **{renda_mais_baixa}**
            - Nota m√©dia: **{nota_mais_baixa:.1f} pontos**
            """)
        
        st.write("#### üí° **O que isso significa na pr√°tica?**")
        
        st.write(f"""
        **Diferen√ßa de Desempenho:** Existe uma diferen√ßa de **{diferenca_notas:.1f} pontos** entre 
        as faixas de renda mais alta e mais baixa. Isso representa aproximadamente 
        **{(diferenca_notas/nota_mais_baixa)*100:.1f}%** de diferen√ßa no desempenho.
        """)
        
        st.write("#### ü§î **Poss√≠veis Explica√ß√µes:**")
        
        st.write("""
        **Por que fam√≠lias com maior renda tendem a ter filhos com melhor desempenho?**
        
        üè† **Recursos e Ambiente:** Melhor infraestrutura para estudos, materiais did√°ticos de qualidade e acesso √† tecnologia.
        
        üìö **Investimento Educacional:** Cursos preparat√≥rios, aulas particulares e educa√ß√£o complementar.
        
        üéØ **Condi√ß√µes de Estudo:** Menor necessidade de trabalhar, mais tempo para se dedicar aos estudos e menos preocupa√ß√µes financeiras.
        
        üè´ **Qualidade Educacional:** Acesso a escolas de melhor qualidade e atividades extracurriculares.
        """)
        
        st.warning("""
        ‚ö†Ô∏è **Importante lembrar:** Estes dados mostram uma tend√™ncia geral, mas existem muitas 
        exce√ß√µes! Estudantes de todas as faixas de renda podem ter excelente desempenho 
        com dedica√ß√£o, boas estrat√©gias de estudo e apoio adequado.
        """)
    
    with tab2:
        st.write("**Nota Geral das Provas Objetivas por Faixa de Renda**")
        st.bar_chart(estatisticas_nota_geral['mean'], x_label="Faixa de Renda", y_label="Nota M√©dia Geral")
    
    with tab3:
        st.write("**Estat√≠sticas Descritivas da Nota Geral por Faixa de Renda**")
        st.dataframe(estatisticas_nota_geral)
    
    with tab4:      
        # Converter faixas de renda para valores num√©ricos ordinais
        mapeamento_renda = {
            'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9,
            'J': 10, 'K': 11, 'L': 12, 'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17
        }
        
        df_corr = df.copy()
        df_corr['RENDA_NUMERICA'] = df_corr['Q006'].map(mapeamento_renda)
        
        # Calcular correla√ß√£o entre renda e nota geral
        correlacao_geral = df_corr['RENDA_NUMERICA'].corr(df_corr['NOTA_GERAL'])
        
        # Mostrar correla√ß√£o
        st.write("#### üìà Correla√ß√£o entre Renda Familiar e Nota Geral:")
        
        st.metric(
            label="Coeficiente de Correla√ß√£o",
            value=f"{correlacao_geral:.4f}",
            help="Valores pr√≥ximos a 1 indicam correla√ß√£o positiva forte"
        )
        
        # Interpretar o resultado
        if correlacao_geral > 0.7:
            interpretacao = "üü¢ **Correla√ß√£o Forte Positiva**"
            descricao = "Existe uma rela√ß√£o forte entre maior renda familiar e maiores notas."
        elif correlacao_geral > 0.3:
            interpretacao = "üü° **Correla√ß√£o Moderada Positiva**"
            descricao = "Existe uma rela√ß√£o moderada entre maior renda familiar e maiores notas."
        elif correlacao_geral > 0.1:
            interpretacao = "üü† **Correla√ß√£o Fraca Positiva**"
            descricao = "Existe uma rela√ß√£o fraca entre maior renda familiar e maiores notas."
        else:
            interpretacao = "üî¥ **Correla√ß√£o Muito Fraca ou Inexistente**"
            descricao = "N√£o h√° uma rela√ß√£o significativa entre renda familiar e notas."
        
        st.success(f"{interpretacao}")
        st.write(descricao)
        
    # Adicionar legenda explicativa em um expander
    with st.expander("üìã Ver Legenda das Faixas de Renda"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.caption("A: Nenhuma Renda")
            st.caption("B: At√© R$ 1.100") 
            st.caption("C: R$ 1.100 - 1.650")
            st.caption("D: R$ 1.650 - 2.200")
            st.caption("E: R$ 2.200 - 2.750")
            st.caption("F: R$ 2.750 - 3.300")
            st.caption("G: R$ 3.300 - 4.400")
            st.caption("H: R$ 4.400 - 5.500")
            st.caption("I: R$ 5.500 - 6.600")
            
        with col2:
            st.caption("J: R$ 6.600 - 7.700")
            st.caption("K: R$ 7.700 - 8.800")
            st.caption("L: R$ 8.800 - 9.900")
            st.caption("M: R$ 9.900 - 11.000")
            st.caption("N: R$ 11.000 - 13.200")
            st.caption("O: R$ 13.200 - 16.500")
            st.caption("P: R$ 16.500 - 22.000")
            st.caption("Q: Acima de R$ 22.000")

def question3(df):
    st.subheader("Distribui√ß√£o de Desempenho nas Provas Objetivas por Regi√£o Geogr√°fica")
    
    # Criar coluna da regi√£o baseada no primeiro d√≠gito do c√≥digo do munic√≠pio
    df = df.copy()
    df['REGIAO_COD'] = df['CO_MUNICIPIO_PROVA'].astype(str).str[0]
    
    # Mapear c√≥digos das regi√µes para nomes
    mapeamento_regioes = {
        '1': 'Norte',
        '2': 'Nordeste', 
        '3': 'Sudeste',
        '4': 'Sul',
        '5': 'Centro-Oeste'
    }
    
    df['REGIAO'] = df['REGIAO_COD'].map(mapeamento_regioes)
    
    # Calcular m√©dia geral das provas objetivas por participante
    colunas_notas = ['NU_NOTA_CN', 'NU_NOTA_CH', 'NU_NOTA_LC', 'NU_NOTA_MT']
    df['MEDIA_GERAL'] = df[colunas_notas].mean(axis=1)
    
    # Calcular estat√≠sticas descritivas por regi√£o
    estatisticas_descritivas = df.groupby('REGIAO')['MEDIA_GERAL'].describe()
    
    # Criar abas para alternar entre an√°lise, gr√°fico, tabela e correla√ß√£o
    tab1, tab2, tab3, tab4 = st.tabs(["üìñ An√°lise Interpretativa", "üìä Gr√°fico", "üìã Tabela Descritiva", "üîó An√°lise de Correla√ß√£o"])
    
    with tab1:
        st.write("### üó∫Ô∏è Como o desempenho no ENEM varia entre as regi√µes do Brasil?")
        
        # Calcular estat√≠sticas para a an√°lise
        melhor_regiao = estatisticas_descritivas['mean'].idxmax()
        melhor_nota = estatisticas_descritivas['mean'].max()
        pior_regiao = estatisticas_descritivas['mean'].idxmin()
        pior_nota = estatisticas_descritivas['mean'].min()
        diferenca_regioes = melhor_nota - pior_nota
        
        # An√°lise principal
        st.write("#### üîç **Principais Descobertas:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success(f"""
            **üèÜ Melhor Desempenho:**
            - Regi√£o: **{melhor_regiao}**
            - Nota m√©dia: **{melhor_nota:.1f} pontos**
            """)
        
        with col2:
            st.warning(f"""
            **üìâ Menor Desempenho:**
            - Regi√£o: **{pior_regiao}**
            - Nota m√©dia: **{pior_nota:.1f} pontos**
            """)
        
        st.write("#### üí° **O que isso significa na pr√°tica?**")
        
        st.write(f"""
        **Diferen√ßa Regional:** Existe uma diferen√ßa de **{diferenca_regioes:.1f} pontos** entre 
        a regi√£o com melhor e pior desempenho. Isso representa aproximadamente 
        **{(diferenca_regioes/pior_nota)*100:.1f}%** de diferen√ßa no desempenho entre regi√µes.
        """)
        
        # Ranking das regi√µes
        ranking_regioes = estatisticas_descritivas['mean'].sort_values(ascending=False)
        
        st.write("#### üèÖ **Ranking das Regi√µes por Desempenho:**")
        
        for i, (regiao, nota) in enumerate(ranking_regioes.items(), 1):
            if i == 1:
                emoji = "ü•á"
                cor = "success"
            elif i == 2:
                emoji = "ü•à"
                cor = "info"
            elif i == 3:
                emoji = "ü•â"
                cor = "info"
            else:
                emoji = f"{i}¬∫"
                cor = "secondary"
            
            with st.container():
                if cor == "success":
                    st.success(f"{emoji} **{regiao}**: {nota:.1f} pontos")
                elif cor == "info":
                    st.info(f"{emoji} **{regiao}**: {nota:.1f} pontos")
                else:
                    st.write(f"{emoji} **{regiao}**: {nota:.1f} pontos")
        
        st.write("#### ü§î **Poss√≠veis Explica√ß√µes para as Diferen√ßas:**")
        
        st.write("""
        **Por que existem diferen√ßas regionais no desempenho do ENEM?**
        
        üè≠ **Desenvolvimento Econ√¥mico:** Maior renda e investimento em infraestrutura educacional.
        
        üè´ **Qualidade da Educa√ß√£o:** Diferen√ßas no investimento per capita, forma√ß√£o docente e recursos escolares.
        
        üåÜ **Concentra√ß√£o Urbana:** Acesso a mais escolas, universidades e mercado competitivo.
        
        üìö **Acesso a Recursos:** Proximidade a centros urbanos, conectividade e materiais did√°ticos.
        """)
        
        # An√°lise estat√≠stica adicional
        desvio_padrao_medio = estatisticas_descritivas['std'].mean()
        coeficiente_variacao = (estatisticas_descritivas['std'] / estatisticas_descritivas['mean'] * 100).mean()
        
        st.write("#### üìä **An√°lise da Variabilidade:**")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "üìà Nota M√©dia Geral", 
                f"{estatisticas_descritivas['mean'].mean():.1f} pts",
                help="M√©dia de todas as regi√µes"
            )
        
        with col2:
            st.metric(
                "üìè Desvio Padr√£o M√©dio", 
                f"{desvio_padrao_medio:.1f} pts",
                help="Variabilidade m√©dia dentro das regi√µes"
            )
        
        with col3:
            st.metric(
                "üîÑ Coef. de Varia√ß√£o", 
                f"{coeficiente_variacao:.1f}%",
                help="Percentual de varia√ß√£o entre regi√µes"
            )
        
        st.info("""
        üí° **Interpreta√ß√£o:** Um coeficiente de varia√ß√£o de 13.4% indica uma variabilidade moderada 
        entre as regi√µes. Isso significa que, embora existam diferen√ßas regionais vis√≠veis, 
        elas n√£o s√£o extremamente grandes quando comparadas √† varia√ß√£o dentro de cada regi√£o.
        
        üìä **Refer√™ncia:** 
        - Baixa varia√ß√£o: < 10%
        - Moderada varia√ß√£o: 10% - 20%  
        - Alta varia√ß√£o: > 20%
        """)
        
        st.warning("""
        ‚ö†Ô∏è **Importante lembrar:** Estes dados refletem tend√™ncias regionais gerais, mas cada regi√£o 
        possui grande diversidade interna. Estudantes excepcionais existem em todas as regi√µes, 
        e fatores individuais como dedica√ß√£o, qualidade da escola espec√≠fica e apoio familiar 
        podem ser mais determinantes que a regi√£o geogr√°fica.
        """)
    
    with tab2:
        st.bar_chart(estatisticas_descritivas['mean'], x_label="Regi√£o", y_label="Nota M√©dia")
    
    with tab3:
        st.dataframe(estatisticas_descritivas)
    
    with tab4:
        st.write("#### üîó Correla√ß√£o entre Regi√£o e Desempenho:")
        
        # Converter regi√µes para valores num√©ricos ordinais (baseado no ranking de desempenho)
        ranking_regioes = estatisticas_descritivas['mean'].sort_values(ascending=False)
        mapeamento_regiao_numerica = {regiao: i+1 for i, regiao in enumerate(ranking_regioes.index)}
        
        df_corr = df.copy()
        df_corr['REGIAO_NUMERICA'] = df_corr['REGIAO'].map(mapeamento_regiao_numerica)
        
        # Calcular correla√ß√£o entre regi√£o (ordenada por desempenho) e nota geral
        correlacao_regional = df_corr['REGIAO_NUMERICA'].corr(df_corr['MEDIA_GERAL'])
        
        # Como ordenamos do melhor para o pior (1=melhor), a correla√ß√£o ser√° negativa
        # Vamos inverter o sinal para facilitar a interpreta√ß√£o
        correlacao_regional_abs = abs(correlacao_regional)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric(
                label="Coeficiente de Correla√ß√£o",
                value=f"{correlacao_regional_abs:.4f}",
                help="Correla√ß√£o entre posi√ß√£o regional no ranking e desempenho individual"
            )
        
        with col2:
            # Calcular vari√¢ncia explicada pela regi√£o (R¬≤)
            r_quadrado = correlacao_regional_abs ** 2
            st.metric(
                label="Vari√¢ncia Explicada (R¬≤)",
                value=f"{r_quadrado:.4f}",
                help="Percentual da varia√ß√£o individual explicada pela regi√£o"
            )
        
        # Interpretar o resultado
        if correlacao_regional_abs > 0.7:
            interpretacao = "üü¢ **Correla√ß√£o Forte**"
            descricao = "A regi√£o geogr√°fica tem uma influ√™ncia forte no desempenho individual."
        elif correlacao_regional_abs > 0.3:
            interpretacao = "üü° **Correla√ß√£o Moderada**"
            descricao = "A regi√£o geogr√°fica tem uma influ√™ncia moderada no desempenho individual."
        elif correlacao_regional_abs > 0.1:
            interpretacao = "üü† **Correla√ß√£o Fraca**"
            descricao = "A regi√£o geogr√°fica tem uma influ√™ncia fraca no desempenho individual."
        else:
            interpretacao = "üî¥ **Correla√ß√£o Muito Fraca**"
            descricao = "A regi√£o geogr√°fica tem influ√™ncia m√≠nima no desempenho individual."
        
        st.success(f"{interpretacao}")
        st.write(descricao)
        
        # An√°lise adicional por disciplina
        st.write("#### üìö **Correla√ß√£o por Disciplina:**")
        
        disciplinas = {
            'NU_NOTA_CN': 'Ci√™ncias da Natureza',
            'NU_NOTA_CH': 'Ci√™ncias Humanas', 
            'NU_NOTA_LC': 'Linguagens e C√≥digos',
            'NU_NOTA_MT': 'Matem√°tica'
        }
        
        correlacoes_disciplinas = {}
        for codigo, nome in disciplinas.items():
            corr = abs(df_corr['REGIAO_NUMERICA'].corr(df_corr[codigo]))
            correlacoes_disciplinas[nome] = corr
        
        # Mostrar correla√ß√µes por disciplina
        for disciplina, corr in correlacoes_disciplinas.items():
            col1, col2 = st.columns([3, 1])
            with col1:
                st.write(f"**{disciplina}:**")
            with col2:
                st.write(f"{corr:.4f}")
        
        # Encontrar disciplina com maior e menor correla√ß√£o regional
        disciplina_maior_corr = max(correlacoes_disciplinas, key=correlacoes_disciplinas.get)
        disciplina_menor_corr = min(correlacoes_disciplinas, key=correlacoes_disciplinas.get)
        
        st.info(f"""
        üí° **Insights por Disciplina:**
        
        - **Maior influ√™ncia regional:** {disciplina_maior_corr} ({correlacoes_disciplinas[disciplina_maior_corr]:.4f})
        - **Menor influ√™ncia regional:** {disciplina_menor_corr} ({correlacoes_disciplinas[disciplina_menor_corr]:.4f})
        
        Isso pode indicar que algumas √°reas do conhecimento s√£o mais sens√≠veis √†s 
        diferen√ßas regionais de infraestrutura, recursos ou tradi√ß√£o educacional.
        """)
        
    # Adicionar explica√ß√£o em um expander
    with st.expander("üìã Ver Informa√ß√µes sobre as Regi√µes"):
        st.caption("**Norte (1):** Acre, Amap√°, Amazonas, Par√°, Rond√¥nia, Roraima, Tocantins")
        st.caption("**Nordeste (2):** Alagoas, Bahia, Cear√°, Maranh√£o, Para√≠ba, Pernambuco, Piau√≠, Rio Grande do Norte, Sergipe")
        st.caption("**Sudeste (3):** Esp√≠rito Santo, Minas Gerais, Rio de Janeiro, S√£o Paulo")
        st.caption("**Sul (4):** Paran√°, Rio Grande do Sul, Santa Catarina")
        st.caption("**Centro-Oeste (5):** Distrito Federal, Goi√°s, Mato Grosso, Mato Grosso do Sul")

def main():
    # Carregar dados
    df_original = load_data()
    
    # Aplicar limpeza de dados
    df = clean_data(df_original)
    
    st.title("An√°lise dos Dados do ENEM")
    st.info("üìà Os dados foram automaticamente limpos removendo outliers e valores nulos usando IsolationForest do scikit-learn")
    
    # Mostrar estat√≠sticas de debug em um expander colaps√°vel
    with st.expander("üîç Ver Estat√≠sticas de Processamento dos Dados"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Dados Originais", f"{len(df_original):,}")
        
        with col2:
            st.metric("Dados Limpos", f"{len(df):,}")
        
        with col3:
            outliers_removidos = len(df_original) - len(df)
            percentual = outliers_removidos/len(df_original)*100
            st.metric("Outliers Removidos", f"{outliers_removidos:,}", f"{percentual:.1f}%")

    # Pergunta 1: Qual √© a rela√ß√£o entre a renda familiar declarada pelos participantes e suas notas m√©dias nas provas objetivas?
    question1(df)
    
    # Pergunta 3: Qual √© a distribui√ß√£o de desempenho nas provas objetivas por regi√µes geogr√°ficas do Brasil?
    question3(df)
    

if __name__ == '__main__': 
    main()